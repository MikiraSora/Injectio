// <auto-generated />
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    /// <summary>
    /// Extension methods for discovered service registrations
    /// </summary>
    public static class DiscoveredServicesExtensions
    {
        /// <summary>
        /// Adds discovered services from Test.Generator to the specified service collection
        /// </summary>
        /// <param name="serviceCollection">The service collection.</param>
        /// <param name="tags">The service registration tags to include.</param>
        /// <returns>The service collection</returns>
        public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestGenerator(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, params string[]? tags)
        {
            var tagSet = new global::System.Collections.Generic.HashSet<string>(tags ?? global::System.Linq.Enumerable.Empty<string>());

            if (tagSet.Count == 0 || tagSet.Intersect(new[] { "Client", "FrontEnd" }).Any())
            {
                global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                    serviceCollection,
                    global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Describe(
                        typeof(global::Injectio.Sample.IServiceTag),
                        typeof(global::Injectio.Sample.ServiceTag),
                        global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
                    )
                );

                global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                    serviceCollection,
                    global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Describe(
                        typeof(global::Injectio.Sample.ServiceTag),
                        typeof(global::Injectio.Sample.ServiceTag),
                        global::Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton
                    )
                );

            }

            return serviceCollection;
        }
    }
}
