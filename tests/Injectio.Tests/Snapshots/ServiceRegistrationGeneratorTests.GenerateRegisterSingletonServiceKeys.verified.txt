// <auto-generated />
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    /// <summary>
    /// Extension methods for discovered service registrations
    /// </summary>
    public static class DiscoveredServicesExtensions
    {
        /// <summary>
        /// Adds discovered services from Test.Generator to the specified service collection
        /// </summary>
        /// <param name="serviceCollection">The service collection.</param>
        /// <param name="tags">The service registration tags to include.</param>
        /// <returns>The service collection</returns>
        public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestGenerator(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection, params string[]? tags)
        {
            var tagSet = new global::System.Collections.Generic.HashSet<string>(tags ?? global::System.Linq.Enumerable.Empty<string>());

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.KeyedSingleton<global::IServiceKeyed, global::Injectio.Sample.ServiceAlphaKeyed>("Alpha")
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.KeyedSingleton<global::IServiceKeyed, global::Injectio.Sample.ServiceBetaKeyed>("Beta")
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.KeyedSingleton<global::IServiceKeyed, global::Injectio.Sample.ServiceAlphaTypeKeyed>(Injectio.Sample.ServiceType.Alpha)
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.KeyedSingleton<global::IServiceKeyed, global::Injectio.Sample.ServiceBetaTypeKeyed>(Injectio.Sample.ServiceType.Beta)
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.KeyedSingleton<global::IServiceKeyed>("Charlie", global::Injectio.Sample.ServiceFactoryKeyed.ServiceFactory)
            );

            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAdd(
                serviceCollection,
                global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.KeyedSingleton<global::IServiceKeyed>("Delta", global::Injectio.Sample.ServiceFactoryKeyed.ServiceFactory)
            );

            return serviceCollection;
        }
    }
}
