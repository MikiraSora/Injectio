using Injectio.Generators.Extensions;

namespace Injectio.Generators;

public static class CodeGenerator
{
    public static string GenerateExtensionClass(IReadOnlyList<ModuleRegistration> moduleRegistrations, IReadOnlyList<ServiceRegistration> serviceRegistrations, string assemblyName, bool skipVersion = false)
    {
        var codeBuilder = new IndentedStringBuilder();
        codeBuilder
            .AppendLine("// <auto-generated>")
            .AppendLine("//     Generated by the Injectio source generator.")
            .AppendLine("// </auto-generated>")
            .AppendLine()
            .AppendLine("namespace Microsoft.Extensions.DependencyInjection")
            .AppendLine("{")
            .IncrementIndent()
            .AppendLine("/// <summary>")
            .AppendLine("/// Extension methods for discovered service registrations")
            .AppendLine("/// </summary>");

        if (!skipVersion)
            codeBuilder
                .Append("[global::System.CodeDom.Compiler.GeneratedCode(\"")
                .Append(ThisAssembly.Project.AssemblyName)
                .Append("\", \"")
                .Append(ThisAssembly.Info.Version)
                .AppendLine("\")]");

        codeBuilder
            .AppendLine("[global::System.Diagnostics.DebuggerNonUserCodeAttribute]")
            .AppendLine("[global::System.Diagnostics.DebuggerStepThroughAttribute]")
            .AppendLine("public static class DiscoveredServicesExtensions")
            .AppendLine("{")
            .IncrementIndent()
            .AppendLine("/// <summary>")
            .AppendLine("/// Adds discovered service registrations to the specified service collection")
            .AppendLine("/// </summary>")
            .AppendLine("/// <param name=\"serviceCollection\">The service collection.</param>")
            .AppendLine("/// <returns>The service collection</returns>")
            .Append("public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection")
            .Append(" Add")
            .Append(assemblyName)
            .AppendLine("(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection)")
            .AppendLine("{")
            .IncrementIndent();

        var moduleCount = 1;

        foreach (var moduleRegistration in moduleRegistrations)
            if (moduleRegistration.IsStatic)
                codeBuilder
                    .AppendIf("global::", !moduleRegistration.ClassName.StartsWith("global::"))
                    .Append(moduleRegistration.ClassName)
                    .Append('.')
                    .Append(moduleRegistration.MethodName)
                    .AppendLine("(serviceCollection);")
                    .AppendLine();
            else
            {
                codeBuilder
                    .Append("var module")
                    .Append($"{moduleCount:0000}")
                    .Append(" = new ")
                    .AppendIf("global::", !moduleRegistration.ClassName.StartsWith("global::"))
                    .Append(moduleRegistration.ClassName)
                    .AppendLine("();");

                codeBuilder
                    .Append("module")
                    .Append($"{moduleCount:0000}")
                    .Append('.')
                    .Append(moduleRegistration.MethodName)
                    .AppendLine("(serviceCollection);")
                    .AppendLine();

                moduleCount++;
            }

        foreach (var serviceRegistration in serviceRegistrations)
        {
            var serviceMethod = GetServiceCollectionMethod(serviceRegistration.Duplicate);

            foreach (var serviceType in serviceRegistration.ServiceTypes)
            {
                if (serviceType.IsNullOrWhiteSpace())
                    continue;

                codeBuilder
                    .Append("global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.")
                    .Append(serviceMethod)
                    .AppendLine("(")
                    .IncrementIndent()
                    .AppendLine("serviceCollection,")
                    .AppendLine("global::Microsoft.Extensions.DependencyInjection.ServiceDescriptor.Describe(")
                    .IncrementIndent()
                    .Append("typeof(")
                    .AppendIf("global::", !serviceType.StartsWith("global::"))
                    .Append(serviceType)
                    .AppendLine("),");

                if (serviceRegistration.Factory.HasValue())
                {
                    bool hasNamespace = serviceRegistration.Factory?.Contains(".") == true;

                    codeBuilder
                        .AppendIf(serviceRegistration.ImplementationType, !hasNamespace)
                        .AppendIf(".", !hasNamespace)
                        .Append(serviceRegistration.Factory);
                }
                else if (serviceRegistration.ImplementationType.HasValue())
                    codeBuilder
                        .Append("typeof(")
                        .AppendIf("global::", !serviceRegistration.ImplementationType.StartsWith("global::"))
                        .Append(serviceRegistration.ImplementationType)
                        .Append(')');
                else
                    codeBuilder
                        .Append("typeof(")
                        .AppendIf("global::", !serviceType.StartsWith("global::"))
                        .Append(serviceType)
                        .Append(')');

                codeBuilder
                    .AppendLine(", ")
                    .Append("global::")
                    .Append(serviceRegistration.Lifetime)
                    .AppendLine()
                    .DecrementIndent()
                    .AppendLine(")")
                    .DecrementIndent()
                    .AppendLine(");")
                    .AppendLine();
            }
        }

        codeBuilder
            .AppendLine("return serviceCollection;")
            .DecrementIndent()
            .AppendLine("}") // method
            .DecrementIndent()
            .AppendLine("}") // class
            .DecrementIndent()
            .AppendLine("}"); // namespace

        return codeBuilder.ToString();
    }

    public static string GetServiceCollectionMethod(object duplicateStrategy)
    {
        if (duplicateStrategy is int number)
        {
            if (number == 2)
                return "Add";

            if (number == 1)
                return "Replace";
        }

        if (duplicateStrategy is string text)
        {
            if (text == KnownTypes.DuplicateStrategyAppendShortName
                || text == KnownTypes.DuplicateStrategyAppendTypeName)
                return "Add";

            if (text == KnownTypes.DuplicateStrategyReplaceShortName
                || text == KnownTypes.DuplicateStrategyReplaceTypeName)
                return "Replace";
        }

        return "TryAdd";
    }

}
